{"version":3,"names":[],"mappings":"","sources":["js/root-dirs.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n// @TODO: Remove this when we fully drop support for IE > 8\n// Avoid `console` errors in browsers that lack a console.\n(function () {\n    // eslint-disable-line wrap-iife\n    let method;\n    const noop = function noop() {}; // eslint-disable-line func-names\n    const methods = ['assert', 'clear', 'count', 'debug', 'dir', 'dirxml', 'error', 'exception', 'group', 'groupCollapsed', 'groupEnd', 'info', 'log', 'markTimeline', 'profile', 'profileEnd', 'table', 'time', 'timeEnd', 'timeStamp', 'trace', 'warn'];\n    let length = methods.length;\n    window.console = window.console || {};\n    const console = window.console;\n\n    while (length--) {\n        method = methods[length];\n\n        // Only stub undefined methods.\n        if (!console[method]) {\n            console[method] = noop;\n        }\n    }\n})();\n\n$(document).ready(() => {\n    function setDefault(which, force) {\n        if (which !== undefined && which.length === 0) {\n            return;\n        }\n\n        if ($('#whichDefaultRootDir').val() === which && force !== true) {\n            return;\n        }\n\n        // Put an asterisk on the text\n        if ($('#' + which).text().charAt(0) !== '*') {\n            $('#' + which).text('*' + $('#' + which).text());\n        }\n\n        // If there's an existing one then take the asterisk off\n        if ($('#whichDefaultRootDir').val() && force !== true) {\n            const oldDefault = $('#' + $('#whichDefaultRootDir').val());\n            oldDefault.text(oldDefault.text().substring(1));\n        }\n\n        $('#whichDefaultRootDir').val(which);\n    }\n\n    function syncOptionIDs() {\n        // Re-sync option ids\n        let i = 0;\n        $('#root_dirs option').each(function () {\n            $(this).prop('id', 'rd-' + i++);\n        });\n    }\n\n    function refreshRootDirs() {\n        if ($('#root_dirs').length === 0) {\n            /* Trigger change event as $.root_dirCheck() function is not\n               always available when this section of code is called. */\n            $('#root_dirs').trigger('change');\n            return;\n        }\n\n        let doDisable = 'true';\n\n        // Re-sync option ids\n        syncOptionIDs();\n\n        // If nothing's selected then select the default\n        if ($('#root_dirs option:selected').length === 0 && $('#whichDefaultRootDir').val().length !== 0) {\n            $('#' + $('#whichDefaultRootDir').val()).prop('selected', true);\n        }\n\n        // If something's selected then we have some behavior to figure out\n        if ($('#root_dirs option:selected').length !== 0) {\n            doDisable = '';\n        }\n\n        // Update the elements\n        $('#deleteRootDir').prop('disabled', doDisable);\n        $('#defaultRootDir').prop('disabled', doDisable);\n        $('#editRootDir').prop('disabled', doDisable);\n\n        let dirString = '';\n        if ($('#whichDefaultRootDir').val().length >= 4) {\n            dirString = $('#whichDefaultRootDir').val().substr(3);\n        }\n        $('#root_dirs option').each(function () {\n            if (dirString.length !== 0) {\n                dirString += '|' + $(this).val();\n            }\n        });\n\n        $('#root_dirText').val(dirString);\n        // Manually trigger change event as setting .val directly doesn't\n        $('#root_dirs').trigger('change');\n    }\n\n    function addRootDir(path) {\n        if (path.length === 0) {\n            return;\n        }\n\n        // Check if it's the first one\n        let isDefault = false;\n        if ($('#whichDefaultRootDir').val().length === 0) {\n            isDefault = true;\n        }\n\n        $('#root_dirs').append('<option value=\"' + path + '\">' + path + '</option>');\n\n        syncOptionIDs();\n\n        if (isDefault) {\n            setDefault($('#root_dirs option').attr('id'));\n        }\n\n        refreshRootDirs();\n        $.get('config/general/saveRootDirs', {\n            root_dirString: $('#root_dirText').val()\n        });\n    }\n\n    function editRootDir(path) {\n        if (path.length === 0) {\n            return;\n        }\n\n        // As long as something is selected\n        if ($('#root_dirs option:selected').length !== 0) {\n            // Update the selected one with the provided path\n            if ($('#root_dirs option:selected').attr('id') === $('#whichDefaultRootDir').val()) {\n                $('#root_dirs option:selected').text('*' + path);\n            } else {\n                $('#root_dirs option:selected').text(path);\n            }\n            $('#root_dirs option:selected').val(path);\n        }\n\n        refreshRootDirs();\n        $.get('config/general/saveRootDirs', {\n            root_dirString: $('#root_dirText').val()\n        });\n    }\n\n    $('#addRootDir').on('click', function () {\n        $(this).nFileBrowser(addRootDir);\n    });\n    $('#editRootDir').on('click', function () {\n        $(this).nFileBrowser(editRootDir, {\n            initialDir: $('#root_dirs option:selected').val()\n        });\n    });\n\n    $('#deleteRootDir').on('click', () => {\n        if ($('#root_dirs option:selected').length !== 0) {\n            const toDelete = $('#root_dirs option:selected');\n            const newDefault = toDelete.attr('id') === $('#whichDefaultRootDir').val();\n            const deletedNum = $('#root_dirs option:selected').attr('id').substr(3);\n\n            toDelete.remove();\n            syncOptionIDs();\n\n            if (newDefault) {\n                console.log('new default when deleting');\n\n                // We deleted the default so this isn't valid anymore\n                $('#whichDefaultRootDir').val('');\n\n                // If we're deleting the default and there are options left then pick a new default\n                if ($('#root_dirs option').length !== 0) {\n                    setDefault($('#root_dirs option').attr('id'));\n                }\n            } else if ($('#whichDefaultRootDir').val().length !== 0) {\n                const oldDefaultNum = $('#whichDefaultRootDir').val().substr(3);\n                if (oldDefaultNum > deletedNum) {\n                    $('#whichDefaultRootDir').val('rd-' + (oldDefaultNum - 1));\n                }\n            }\n        }\n        refreshRootDirs();\n        $.get('config/general/saveRootDirs', {\n            root_dirString: $('#root_dirText').val()\n        });\n    });\n\n    $('#defaultRootDir').on('click', () => {\n        if ($('#root_dirs option:selected').length !== 0) {\n            setDefault($('#root_dirs option:selected').attr('id'));\n        }\n        refreshRootDirs();\n        $.get('config/general/saveRootDirs', {\n            root_dirString: $('#root_dirText').val()\n        });\n    });\n    $('#root_dirs').click(refreshRootDirs);\n\n    // Set up buttons on page load\n    syncOptionIDs();\n    setDefault($('#whichDefaultRootDir').val(), true);\n    refreshRootDirs();\n});\n\n},{}]},{},[1]);\n"],"file":"root-dirs.js"}